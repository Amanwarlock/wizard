"use strict;"
var Mongoose = require("mongoose");
const readline = require('readline');
var async = require("async");
var _ = require("lodash");
var fs = require("fs");
var jsonexport = require('jsonexport');
var moment = require("moment");
var chalk = require('chalk');
var chalker = new chalk.constructor({ enabled: true, level: 1 });

/* ######################################## */
var http = require("http");
var cuti = require("cuti");
var puttu = require("puttu-redis");
puttu.connect();
/* -------------------------------------------------------------------------------------------- */

/* Mongo URL */
const url = "mongodb://skaman:QdEN96NQMspbGDtXrHRWDQ@35.154.220.245:27017/skstaging";
//const url ="mongodb://10.0.1.102:27017/skstaging";
var path = "/home/aman/Desktop/Hygiene_reports";//__dirname + "/csv_reports";
const folder = "output";


/* --------MONGO CONNECT------ */
var options = { "useNewUrlParser": true };
Mongoose.connect(url, options);
var db = Mongoose.connection;

/* -----LISTENERS------ */
db.on('error', function () {
    console.log("Connection Error....");
    process.exit();
});

db.once('open', function callback() {
    console.log("Connection established to : ", url);
    runScript();
});
/********************************************************************************************************************************************/

function runScript() {
    console.log("#SCRIPT STARTED: --------------------------------------------------------------------------------------");
    list = list.map(l => l.toString());
    db.collection('warehouses').find({ _id: { $in: list } }).toArray((err, invList) => {
        if (invList && invList.length) {
            var ledgerList = [];
            var queue = async.queue((inv, cb) => {
                db.collection('stockledgers').find({ snapShotId: inv._id }).count((err, count) => {
                    if (!count) {
                        console.log("COunt", inv._id, count);
                        var ledger = {
                            "snapShotId": inv._id,
                            "warehouseId": inv.whId,
                            "productId": inv.productId,
                            "requestQty": inv.quantity,
                            "referenceType": "GRN",
                            "deleted": false,
                            "createdAt": inv.createdAt,
                            "createdBy": "9113033298",
                            "status": "Committed",
                            "stockTransaction": [{
                                "_id": inv._id,
                                "quantity": 0,
                                "onHold": 0,
                                "state": "before"
                            },
                            {
                                "_id": inv._id,
                                "quantity": inv.quantity,
                                "onHold": inv.onHold,
                                "state": "after"
                            }],
                            "barcode": [],
                            "serialNo": [],
                            "reference": {
                                "objectId": "Audit-Ledger Entry Insertion",
                            }
                        }
                        ledgerList.push(ledger);
                        /*  _fire('wh', '/stockledger/bulkStockVariation', 'PUT', { "list": [ledger] }).then(ledger => {
                             console.log(chalker.blue.bold(ledger));
                             cb(null);
                         }).catch(e => {
                             console.log(chalker.red.bold(e));
                             cb(null);
                         }); */
                    } else {
                        var position = {
                            "location": inv.location,
                            "area": inv.area,
                            "whId": inv.whId,
                            "rackId": inv.rackId,
                            "binId": inv.binId
                        }
                        db.collection('stockledgers').findOneAndUpdate({ snapShotId: inv._id }, { $set: { "position": position } }, function (err, result) {
                            console.log("updated..");
                            cb(null);
                        });
                    }
                });
            });

            queue.drain = () => {
                console.log(chalker.green.bold("Completed --.............."));
                process.exit();
                /*  _fire('wh', '/stockledger/bulkStockVariation', 'PUT', { "list": ledgerList }).then(ledger => {
                     console.log(chalker.blue.bold(ledger));
                     console.log(chalker.green.bold("Completed --.............."));
                     process.exit();
                 }).catch(e => {
                     console.log(chalker.red.bold(e));
                     process.exit();
                 }); */
            };

            queue.push(invList, (err, result) => {
                if (err) {
                    console.log(chalker.red.bold(err));
                }
            });
        }
    });
}

/* 

function _fire(_magickey, _path, _method, _payload) {
    return new Promise((resolve, reject) => {
        if (!_magickey) {
            reject(new Error(`Magic Key cannot be empty for HTTP request.`));
            return;
        }
        if (!_path) {
            reject(`Path cannot be empty for HTTP request.`);
            return;
        }
        if (!_method) {
            reject(`Http Method cannot be empty for HTTP request.`);
            return;
        }
        cuti.request.getUrlandMagicKey(_magickey)
            .then(options => {
                //options.hostname = "newerp.storeking.in";
                //options.port = '8080';
                options.path += _path;
                options.method = _method;
                console.log("OPtions : ", options);
                var request = http.request(options, response => {
                    var data = "";
                    response.on('data', _data => data += _data.toString());
                    response.on('end', () => {
                        try {
                            console.log("Error :", data);
                            data = JSON.parse(data);
                            resolve(data);
                        } catch (e) {
                            reject(e);
                        }
                    });
                });
                if ((_method === 'POST' || _method === 'PUT') && !_.isEmpty(_payload))
                    request.end(JSON.stringify(_payload));
                else
                    request.end();

            }).catch(e => reject(e));
    });
}
 */


const token = "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YjM0NzVlNmRkNDMxOTUyMTRjZDg2MzMiLCJ1c2VybmFtZSI6IjkxMTMwMzMyOTgiLCJsbERhdGUiOiIyMDE4LTA5LTE3VDA1OjM3OjEyLjQ0MVoiLCJpc0FjdGl2ZSI6dHJ1ZSwiaXNTZWxsZXIiOmZhbHNlLCJlbXBsb3llZSI6IkVNUDc2OSIsIndhcmVob3VzZXMiOlsiV01GMCJdLCJub3RpZmljYXRpb24iOnsiQWNjb3VudCBDcmVhdGlvbiI6ZmFsc2UsIlJlc2V0IFBhc3N3b3JkIjpmYWxzZX0sImltYWdlIjpbXSwidXNlclR5cGUiOiJFbXBsb3llZSIsInJlc2V0UGFzc3dvcmQiOmZhbHNlLCJjcmVhdGVkQXQiOnRydWUsImxhc3RVcGRhdGVkIjoiMjAxOC0wOC0xM1QwNzozOTo0My4wNDRaIiwicmVmSWQiOiJFTVA3NjkiLCJuYW1lIjoiQW1hbiIsImVuYWJsZU90cCI6dHJ1ZSwicGxhdGZvcm0iOiJXZWIiLCJ3aERldGFpbHMiOnsid2hJZHMiOlsiV01GMCIsIldNRjEiLCJXTUYyIl0sImRlZmF1bHRXaElkIjoiV01GMCJ9LCJyb2xlSWQiOiJST0xFMSIsImlhdCI6MTUzNzI0NjY2NiwiZXhwIjoxNTM3MzMzMDY2fQ.F224a62it333ZVjBsCTiuEkdrx81_Fp0no2FCQ7mNdA";

function _fire(_magickey, _path, _method, _payload) {
    return new Promise((resolve, reject) => {
        if (!_path) {
            reject(`Path cannot be empty for HTTP request.`);
            return;
        }
        if (!_method) {
            reject(`Http Method cannot be empty for HTTP request.`);
            return;
        }
        var options = {};

        options.hostname = "newerp.storeking.in";
        options.port = '8080';
        options.headers = {
            "content-type": "application/json",
            "authorization": token
        };
        options.path = `/api/wh/v1${_path}`;//"/api/wh/v1" + _path;
        options.method = _method;

        console.log("OPtions : ", options);

        var request = http.request(options, response => {
            var data = "";
            response.on('data', _data => data += _data.toString());
            response.on('end', () => {
                if (response.statusCode == 200) {
                    try {
                        if (data) {
                            resolve(data);
                        } else {
                            resolve();
                        }
                    } catch (e) {
                        reject(e);
                    }
                } else {
                    reject(new Error(data));
                }

            });
        });
        if ((_method === 'POST' || _method === 'PUT') && !_.isEmpty(_payload))
            request.end(JSON.stringify(_payload));
        else
            request.end();
    });
}

/* 
{
        "snapShotId": "WH25885",
        "warehouseId": "WMF1",
        "productId": "PR15002",
        "requestQty": 28,
        "referenceType": "Stock Reservation",
        "_id": "10173181536734955354",
        "lastUpdated": "2018-09-12T06:49:15.357Z",
        "deleted": false,
        "createdAt": "2018-09-12T06:49:15.357Z",
        "stockTransaction": [],
        "barcode": [],
        "serialNo": [],
        "status": "Pending",
        "reference": {
            "objectId": "5b910137cdee45e541879be7",
            "subOrderId": "OR2018090663545_1"
        }
    }



*/

var list = [
    "WH14583",
    "WH14584",
    "WH14585",
    "WH14591",
    "WH14592",
    "WH14593",
    "WH14590",
    "WH14594",
    "WH14595",
    "WH14596",
    "WH14597",
    "WH14598",
    "WH14599",
    "WH14600",
    "WH21545",
    "WH21522",
    "WH21523",
    "WH21435",
    "WH21434",
    "WH21536",
    "WH21538",
    "WH21543",
    "WH20627",
    "WH21423",
    "WH21492",
    "WH21490",
    "WH20983",
    "WH21527",
    "WH21514",
    "WH20975",
    "WH21542",
    "WH21537",
    "WH21524",
    "WH21563",
    "WH20614",
    "WH21039",
    "WH20952",
    "WH20601",
    "WH20603",
    "WH21513",
    "WH21515",
    "WH20870",
    "WH21187",
    "WH21166",
    "WH20610",
    "WH21560",
    "WH20615",
    "WH20620",
    "WH21432",
    "WH21546",
    "WH21270",
    "WH21271",
    "WH21192",
    "WH20819",
    "WH20822",
    "WH20863",
    "WH21069",
    "WH21072",
    "WH21017",
    "WH21327",
    "WH21407",
    "WH20834",
    "WH20965",
    "WH21227",
    "WH21183",
    "WH21561",
    "WH21341",
    "WH20646",
    "WH20962",
    "WH20841",
    "WH21373",
    "WH20947",
    "WH21331",
    "WH21339",
    "WH21264",
    "WH21203",
    "WH21204",
    "WH21219",
    "WH21220",
    "WH21216",
    "WH21161",
    "WH21319",
    "WH21217",
    "WH21218",
    "WH21326",
    "WH21296",
    "WH21170",
    "WH21212",
    "WH21195",
    "WH20613",
    "WH21541",
    "WH20640",
    "WH20935",
    "WH21517",
    "WH20602",
    "WH21347",
    "WH21349",
    "WH21555",
    "WH21292",
    "WH21148",
    "WH21149",
    "WH21396",
    "WH21548",
    "WH21310",
    "WH21312",
    "WH21507",
    "WH21505",
    "WH21356",
    "WH21311",
    "WH21461",
    "WH21457",
    "WH21565",
    "WH20852",
    "WH21062",
    "WH21178",
    "WH20661",
    "WH20701",
    "WH20612",
    "WH21533",
    "WH20658",
    "WH20741",
    "WH20611",
    "WH21525",
    "WH20703",
    "WH20633",
    "WH21551",
    "WH20704",
    "WH20617",
    "WH21531",
    "WH14545",
    "WH14568",
    "WH15729",
    "WH20616",
    "WH21529",
    "WH15727",
    "WH20607",
    "WH21521",
    "WH15730",
    "WH20643",
    "WH15738",
    "WH15728",
    "WH15731",
    "WH15739",
    "WH15735",
    "WH15733",
    "WH15740",
    "WH15732",
    "WH15736",
    "WH15742",
    "WH15734",
    "WH15741",
    "WH15737",
    "WH15743",
    "WH14136",
    "WH14566",
    "WH14569",
    "WH14137",
    "WH14567",
    "WH14130",
    "WH14570",
    "WH14138",
    "WH14574",
    "WH14580",
    "WH17018",
    "WH14575",
    "WH17016",
    "WH14573",
    "WH17017",
    "WH15444",
    "WH16030",
    "WH15440",
    "WH16029",
    "WH15407",
    "WH16033",
    "WH16024",
    "WH16021",
    "WH16018",
    "WH16016",
    "WH16017",
    "WH16022",
    "WH14183",
    "WH16040",
    "WH16032",
    "WH16039",
    "WH16038",
    "WH16034",
    "WH15211",
    "WH16025",
    "WH16028",
    "WH15080",
    "WH15106",
    "WH16027",
    "WH16020",
    "WH16031",
    "WH16037",
    "WH16026",
    "WH15441",
    "WH16035",
    "WH16036",
    "WH15443",
    "WH16019",
    "WH16023",
    "WH16043",
    "WH14576",
    "WH15568",
    "WH14572",
    "WH14571",
    "WH14079",
    "WH14082",
    "WH14081",
    "WH14080",
    "WH14083",
    "WH14097",
    "WH14098",
    "WH14362",
    "WH14577",
    "WH14630",
    "WH16054",
    "WH14084",
    "WH14085",
    "WH14466",
    "WH14086",
    "WH14465",
    "WH14467",
    "WH14578",
    "WH14095",
    "WH14096",
    "WH14099",
    "WH14363",
    "WH14579",
    "WH14629",
    "WH16055",
    "WH14105",
    "WH14170",
    "WH14230",
    "WH14383",
    "WH14384",
    "WH14385",
    "WH15442",
    "WH15457",
    "WH14251",
    "WH17147",
    "WH14312",
    "WH14381",
    "WH14382",
    "WH14386",
    "WH15439",
    "WH15744",
    "WH14325",
    "WH16218",
    "WH14326",
    "WH14435",
    "WH14436",
    "WH17146",
    "WH14437",
    "WH14628",
    "WH14627",
    "WH14631",
    "WH14632",
    "WH14705",
    "WH14738",
    "WH16057",
    "WH14712",
    "WH14733",
    "WH16061",
    "WH14716",
    "WH14742",
    "WH16058",
    "WH14717",
    "WH14749",
    "WH14699",
    "WH14746",
    "WH14713",
    "WH14740",
    "WH16082",
    "WH14702",
    "WH14741",
    "WH16062",
    "WH14718",
    "WH14736",
    "WH16067",
    "WH14714",
    "WH14729",
    "WH14734",
    "WH16056",
    "WH14715",
    "WH14732",
    "WH16064",
    "WH14701",
    "WH14745",
    "WH16065",
    "WH14710",
    "WH14735",
    "WH16066",
    "WH14706",
    "WH14748",
    "WH14700",
    "WH14731",
    "WH16059",
    "WH14709",
    "WH14730",
    "WH16063",
    "WH14703",
    "WH14737",
    "WH16060",
    "WH14707",
    "WH14739",
    "WH16068",
    "WH14708",
    "WH14743",
    "WH16083",
    "WH14704",
    "WH14744",
    "WH16081",
    "WH14711",
    "WH14747",
    "WH16084",
    "WH14906",
    "WH15519",
    "WH14909",
    "WH15522",
    "WH14908",
    "WH15520",
    "WH14907",
    "WH15267",
    "WH15321",
    "WH14910",
    "WH14911",
    "WH15277",
    "WH15285",
    "WH17123",
    "WH14916",
    "WH15521",
    "WH14914",
    "WH15523",
    "WH14915",
    "WH14912",
    "WH14913",
    "WH14917",
    "WH14920",
    "WH14918",
    "WH14919",
    "WH14926",
    "WH14929",
    "WH17137",
    "WH14936",
    "WH15258",
    "WH15324",
    "WH21036",
    "WH14922",
    "WH14941",
    "WH15271",
    "WH15319",
    "WH17124",
    "WH20967",
    "WH14921",
    "WH21277",
    "WH14923",
    "WH14928",
    "WH15270",
    "WH15283",
    "WH21136",
    "WH14924",
    "WH14938",
    "WH14939",
    "WH14940",
    "WH14942",
    "WH15274",
    "WH15282",
    "WH17128",
    "WH14925",
    "WH15275",
    "WH15307",
    "WH17127",
    "WH14944",
    "WH14949",
    "WH17129",
    "WH14927",
    "WH17134",
    "WH14951",
    "WH14950",
    "WH15262",
    "WH15323",
    "WH17133",
    "WH14930",
    "WH14934",
    "WH15151",
    "WH14931",
    "WH14932",
    "WH14933",
    "WH14935",
    "WH14948",
    "WH15518",
    "WH14947",
    "WH15261",
    "WH15279",
    "WH14946",
    "WH15269",
    "WH15309",
    "WH17120",
    "WH14937",
    "WH17126",
    "WH14945",
    "WH15268",
    "WH15320",
    "WH14943",
    "WH14952",
    "WH15265",
    "WH15280",
    "WH16802",
    "WH14954",
    "WH15256",
    "WH15326",
    "WH14953",
    "WH15263",
    "WH15322",
    "WH17132",
    "WH14955",
    "WH15129",
    "WH21503",
    "WH16852",
    "WH14957",
    "WH15272",
    "WH15308",
    "WH17125",
    "WH14956",
    "WH14959",
    "WH14958",
    "WH15257",
    "WH15325",
    "WH14962",
    "WH17138",
    "WH14960",
    "WH15273",
    "WH15284",
    "WH14961",
    "WH15264",
    "WH15311",
    "WH17122",
    "WH14963",
    "WH17119",
    "WH14964",
    "WH14967",
    "WH17113",
    "WH14965",
    "WH14966",
    "WH14969",
    "WH14968",
    "WH17145",
    "WH14970",
    "WH14971",
    "WH14973",
    "WH14975",
    "WH16801",
    "WH14972",
    "WH14974",
    "WH20759",
    "WH14976",
    "WH14977",
    "WH14978",
    "WH14981",
    "WH14984",
    "WH14980",
    "WH14979",
    "WH14985",
    "WH17116",
    "WH14983",
    "WH14986",
    "WH15083",
    "WH16842",
    "WH14988",
    "WH14982",
    "WH17131",
    "WH14990",
    "WH14992",
    "WH14989",
    "WH14991",
    "WH14987",
    "WH14998",
    "WH14993",
    "WH14999",
    "WH15000",
    "WH14996",
    "WH15082",
    "WH14994",
    "WH14995",
    "WH14997",
    "WH16777",
    "WH15001",
    "WH15081",
    "WH15044",
    "WH15045",
    "WH15260",
    "WH15312",
    "WH17114",
    "WH15051",
    "WH15276",
    "WH15306",
    "WH15050",
    "WH15046",
    "WH15054",
    "WH15266",
    "WH15310",
    "WH17121",
    "WH15049",
    "WH15254",
    "WH15281",
    "WH15047",
    "WH15155",
    "WH15048",
    "WH15052",
    "WH15255",
    "WH15327",
    "WH15053",
    "WH17136",
    "WH15056",
    "WH21210",
    "WH15055",
    "WH15154",
    "WH15063",
    "WH15259",
    "WH15278",
    "WH15057",
    "WH15059",
    "WH17117",
    "WH15058",
    "WH15061",
    "WH15060",
    "WH17118",
    "WH15062",
    "WH15065",
    "WH15064",
    "WH15066",
    "WH16800",
    "WH15067",
    "WH15068",
    "WH15069",
    "WH15071",
    "WH15070",
    "WH15073",
    "WH15072",
    "WH15076",
    "WH15107",
    "WH17135",
    "WH15075",
    "WH17130",
    "WH15077",
    "WH15074",
    "WH15078",
    "WH15079",
    "WH15524",
    "WH15156",
    "WH17115",
    "WH15403",
    "WH15404",
    "WH15408",
    "WH15410",
    "WH15409",
    "WH15411",
    "WH15450",
    "WH15412",
    "WH15413",
    "WH15415",
    "WH15414",
    "WH15416",
    "WH15417",
    "WH15510",
    "WH15418",
    "WH15509",
    "WH15419",
    "WH15511",
    "WH15422",
    "WH15428",
    "WH15432",
    "WH15493",
    "WH15426",
    "WH15507",
    "WH15429",
    "WH15506",
    "WH15430",
    "WH15513",
    "WH15431",
    "WH15512",
    "WH15433",
    "WH15460",
    "WH15461",
    "WH15434",
    "WH15508",
    "WH15452",
    "WH21559",
    "WH21577",
    "WH15451",
    "WH15454",
    "WH15453",
    "WH15455",
    "WH15456",
    "WH15479",
    "WH15480",
    "WH15481",
    "WH15482",
    "WH15484",
    "WH15483",
    "WH15485",
    "WH15486",
    "WH15487",
    "WH15488",
    "WH15501",
    "WH15525",
    "WH15526",
    "WH15527",
    "WH15528",
    "WH15529",
    "WH15530",
    "WH15531",
    "WH15532",
    "WH15533",
    "WH15534",
    "WH15535",
    "WH15536",
    "WH15537",
    "WH15538",
    "WH15544",
    "WH15542",
    "WH15540",
    "WH15539",
    "WH15541",
    "WH15543",
    "WH15545",
    "WH15555",
    "WH15554",
    "WH15557",
    "WH15559",
    "WH15558",
    "WH15556",
    "WH16265",
    "WH16266",
    "WH16277",
    "WH16271",
    "WH16269",
    "WH16267",
    "WH16268",
    "WH16279",
    "WH16273",
    "WH16274",
    "WH16275",
    "WH16272",
    "WH16270",
    "WH16276",
    "WH16281",
    "WH16282",
    "WH16280",
    "WH16278",
    "WH16287",
    "WH16290",
    "WH16283",
    "WH16288",
    "WH16291",
    "WH16286",
    "WH16292",
    "WH16284",
    "WH16295",
    "WH16297",
    "WH16285",
    "WH16289",
    "WH16293",
    "WH16294",
    "WH16296",
    "WH16298",
    "WH16299",
    "WH16302",
    "WH16301",
    "WH16300",
    "WH20998",
    "WH16303",
    "WH16304",
    "WH21375",
    "WH16305",
    "WH16306",
    "WH16307",
    "WH16308",
    "WH16311",
    "WH16309",
    "WH16310",
    "WH20997",
    "WH16312",
    "WH16652",
    "WH16653",
    "WH16686",
    "WH16703",
    "WH16744",
    "WH16843",
    "WH16915",
    "WH20716",
    "WH16920",
    "WH17033",
    "WH17036",
    "WH17035",
    "WH17034",
    "WH17038",
    "WH17041",
    "WH17037",
    "WH17039",
    "WH17042",
    "WH17043",
    "WH17045",
    "WH17048",
    "WH17046",
    "WH17047",
    "WH17044",
    "WH17040",
    "WH17049",
    "WH17050",
    "WH17172",
    "WH17173",
    "WH21308",
    "WH17174",
    "WH17175",
    "WH17177",
    "WH17176",
    "WH17179",
    "WH17180",
    "WH17178",
    "WH17181",
    "WH17183",
    "WH17182",
    "WH17184",
    "WH17186",
    "WH17185",
    "WH17188",
    "WH17187",
    "WH17189",
    "WH17191",
    "WH17190",
    "WH17192",
    "WH17194",
    "WH17193",
    "WH17195",
    "WH17197",
    "WH17196",
    "WH17198",
    "WH17199",
    "WH17200",
    "WH17201",
    "WH17202",
    "WH17204",
    "WH17203",
    "WH17205",
    "WH17206",
    "WH17209",
    "WH17207",
    "WH17215",
    "WH17208",
    "WH17211",
    "WH17210",
    "WH17218",
    "WH17212",
    "WH17213",
    "WH17214",
    "WH17216",
    "WH17217",
    "WH17220",
    "WH17219",
    "WH17222",
    "WH17223",
    "WH17221",
    "WH17224",
    "WH17227",
    "WH17225",
    "WH17226",
    "WH17230",
    "WH17228",
    "WH17229",
    "WH17232",
    "WH17231",
    "WH17234",
    "WH17233",
    "WH17235",
    "WH17236",
    "WH17237",
    "WH17239",
    "WH17238",
    "WH17241",
    "WH17240",
    "WH17242",
    "WH17243",
    "WH17245",
    "WH17247",
    "WH17250",
    "WH17244",
    "WH17246",
    "WH17248",
    "WH17249",
    "WH17293",
    "WH17376",
    "WH17383",
    "WH17454",
    "WH17457",
    "WH17460",
    "WH17499",
    "WH17500",
    "WH17501",
    "WH17544",
    "WH17545",
    "WH17546",
    "WH17558",
    "WH17559",
    "WH17560",
    "WH17562",
    "WH17563",
    "WH17561",
    "WH17565",
    "WH17566",
    "WH17567",
    "WH17564",
    "WH17570",
    "WH17569",
    "WH17568",
    "WH17572",
    "WH17571",
    "WH17573",
    "WH17574",
    "WH17575",
    "WH17578",
    "WH17576",
    "WH17577",
    "WH17579",
    "WH17597",
    "WH17600",
    "WH17595",
    "WH17601",
    "WH17604",
    "WH17602",
    "WH17596",
    "WH17598",
    "WH17599",
    "WH17605",
    "WH17603",
    "WH17606",
    "WH17729",
    "WH17748",
    "WH17747",
    "WH17749",
    "WH17750",
    "WH17755",
    "WH17752",
    "WH17754",
    "WH17753",
    "WH17751",
    "WH17765",
    "WH17757",
    "WH17758",
    "WH17764",
    "WH17756",
    "WH17759",
    "WH17769",
    "WH17761",
    "WH17762",
    "WH17767",
    "WH17760",
    "WH17768",
    "WH17763",
    "WH17766",
    "WH17770",
    "WH17771",
    "WH17772",
    "WH17775",
    "WH17776",
    "WH17777",
    "WH17878",
    "WH17879",
    "WH17896",
    "WH20642",
    "WH20644",
    "WH20645",
    "WH22444",
    "WH22445",
    "WH22446",
    "WH22447",
    "WH22448",
    "WH22449",
    "WH22450",
    "WH22451",
    "WH22452",
    "WH22453",
    "WH22454",
    "WH22455",
    "WH22456",
    "WH22457",
    "WH22458",
    "WH22462",
    "WH22463",
    "WH22464",
    "WH22465",
    "WH20623",
    "WH21550",
    "WH21518",
    "WH21476",
    "WH21413",
    "WH21422",
    "WH20621",
    "WH21532",
    "WH20851",
    "WH21450",
    "WH21556",
    "WH21553",
    "WH21554",
    "WH21564",
    "WH21562",
    "WH21557",
    "WH21566",
    "WH21568",
    "WH21567",
    "WH20631",
    "WH21558",
    "WH21574",
    "WH21336",
    "WH20744",
    "WH20745",
    "WH25459",
    "WH25460"
]